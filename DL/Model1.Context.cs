//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IvBetoPruebaTecnicaDosEntities : DbContext
    {
        public IvBetoPruebaTecnicaDosEntities()
            : base("name=IvBetoPruebaTecnicaDosEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Confederacion> Confederacion { get; set; }
        public virtual DbSet<Equipo> Equipo { get; set; }
        public virtual DbSet<Liga> Liga { get; set; }
    
        public virtual ObjectResult<ConfedGetAll_Result> ConfedGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfedGetAll_Result>("ConfedGetAll");
        }
    
        public virtual int EquipoAdd(string nombreEquipo, Nullable<int> anioFundacion, string ciudadSede, string estadio, Nullable<int> titulosNacionales, Nullable<int> titulosInternacionales, Nullable<int> idLiga, ObjectParameter filasInsertadas)
        {
            var nombreEquipoParameter = nombreEquipo != null ?
                new ObjectParameter("NombreEquipo", nombreEquipo) :
                new ObjectParameter("NombreEquipo", typeof(string));
    
            var anioFundacionParameter = anioFundacion.HasValue ?
                new ObjectParameter("AnioFundacion", anioFundacion) :
                new ObjectParameter("AnioFundacion", typeof(int));
    
            var ciudadSedeParameter = ciudadSede != null ?
                new ObjectParameter("CiudadSede", ciudadSede) :
                new ObjectParameter("CiudadSede", typeof(string));
    
            var estadioParameter = estadio != null ?
                new ObjectParameter("Estadio", estadio) :
                new ObjectParameter("Estadio", typeof(string));
    
            var titulosNacionalesParameter = titulosNacionales.HasValue ?
                new ObjectParameter("TitulosNacionales", titulosNacionales) :
                new ObjectParameter("TitulosNacionales", typeof(int));
    
            var titulosInternacionalesParameter = titulosInternacionales.HasValue ?
                new ObjectParameter("TitulosInternacionales", titulosInternacionales) :
                new ObjectParameter("TitulosInternacionales", typeof(int));
    
            var idLigaParameter = idLiga.HasValue ?
                new ObjectParameter("IdLiga", idLiga) :
                new ObjectParameter("IdLiga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipoAdd", nombreEquipoParameter, anioFundacionParameter, ciudadSedeParameter, estadioParameter, titulosNacionalesParameter, titulosInternacionalesParameter, idLigaParameter, filasInsertadas);
        }
    
        public virtual int EquipoDelete(Nullable<int> idEquipo, ObjectParameter filasEliminadas)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipoDelete", idEquipoParameter, filasEliminadas);
        }
    
        public virtual ObjectResult<EquipoGetAll_Result> EquipoGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipoGetAll_Result>("EquipoGetAll");
        }
    
        public virtual ObjectResult<EquipoGetById_Result> EquipoGetById(Nullable<int> idEquipo)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipoGetById_Result>("EquipoGetById", idEquipoParameter);
        }
    
        public virtual int EquipoUpdate(Nullable<int> idEquipo, string nombreEquipo, Nullable<int> anioFundacion, string ciudadSede, string estadio, Nullable<int> titulosNacionales, Nullable<int> titulosInternacionales, Nullable<int> idLiga, ObjectParameter filasActualizadas)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            var nombreEquipoParameter = nombreEquipo != null ?
                new ObjectParameter("NombreEquipo", nombreEquipo) :
                new ObjectParameter("NombreEquipo", typeof(string));
    
            var anioFundacionParameter = anioFundacion.HasValue ?
                new ObjectParameter("AnioFundacion", anioFundacion) :
                new ObjectParameter("AnioFundacion", typeof(int));
    
            var ciudadSedeParameter = ciudadSede != null ?
                new ObjectParameter("CiudadSede", ciudadSede) :
                new ObjectParameter("CiudadSede", typeof(string));
    
            var estadioParameter = estadio != null ?
                new ObjectParameter("Estadio", estadio) :
                new ObjectParameter("Estadio", typeof(string));
    
            var titulosNacionalesParameter = titulosNacionales.HasValue ?
                new ObjectParameter("TitulosNacionales", titulosNacionales) :
                new ObjectParameter("TitulosNacionales", typeof(int));
    
            var titulosInternacionalesParameter = titulosInternacionales.HasValue ?
                new ObjectParameter("TitulosInternacionales", titulosInternacionales) :
                new ObjectParameter("TitulosInternacionales", typeof(int));
    
            var idLigaParameter = idLiga.HasValue ?
                new ObjectParameter("IdLiga", idLiga) :
                new ObjectParameter("IdLiga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipoUpdate", idEquipoParameter, nombreEquipoParameter, anioFundacionParameter, ciudadSedeParameter, estadioParameter, titulosNacionalesParameter, titulosInternacionalesParameter, idLigaParameter, filasActualizadas);
        }
    
        public virtual int LigaAdd(string nombreLiga, string pais, Nullable<int> idConfederacion, ObjectParameter filasInsertadas)
        {
            var nombreLigaParameter = nombreLiga != null ?
                new ObjectParameter("NombreLiga", nombreLiga) :
                new ObjectParameter("NombreLiga", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var idConfederacionParameter = idConfederacion.HasValue ?
                new ObjectParameter("IdConfederacion", idConfederacion) :
                new ObjectParameter("IdConfederacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LigaAdd", nombreLigaParameter, paisParameter, idConfederacionParameter, filasInsertadas);
        }
    
        public virtual int LigaDelete(Nullable<int> idLiga, ObjectParameter filasEliminadas)
        {
            var idLigaParameter = idLiga.HasValue ?
                new ObjectParameter("IdLiga", idLiga) :
                new ObjectParameter("IdLiga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LigaDelete", idLigaParameter, filasEliminadas);
        }
    
        public virtual ObjectResult<LigaGetAll_Result> LigaGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LigaGetAll_Result>("LigaGetAll");
        }
    
        public virtual ObjectResult<LigaGetByConfed_Result> LigaGetByConfed(Nullable<int> idConfederacion)
        {
            var idConfederacionParameter = idConfederacion.HasValue ?
                new ObjectParameter("IdConfederacion", idConfederacion) :
                new ObjectParameter("IdConfederacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LigaGetByConfed_Result>("LigaGetByConfed", idConfederacionParameter);
        }
    
        public virtual ObjectResult<LigaGetById_Result> LigaGetById(Nullable<int> idLiga)
        {
            var idLigaParameter = idLiga.HasValue ?
                new ObjectParameter("IdLiga", idLiga) :
                new ObjectParameter("IdLiga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LigaGetById_Result>("LigaGetById", idLigaParameter);
        }
    
        public virtual int LigaUpdate(Nullable<int> idLiga, string nombreLiga, string pais, Nullable<int> idConfederacion, ObjectParameter filasActualizadas)
        {
            var idLigaParameter = idLiga.HasValue ?
                new ObjectParameter("IdLiga", idLiga) :
                new ObjectParameter("IdLiga", typeof(int));
    
            var nombreLigaParameter = nombreLiga != null ?
                new ObjectParameter("NombreLiga", nombreLiga) :
                new ObjectParameter("NombreLiga", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var idConfederacionParameter = idConfederacion.HasValue ?
                new ObjectParameter("IdConfederacion", idConfederacion) :
                new ObjectParameter("IdConfederacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LigaUpdate", idLigaParameter, nombreLigaParameter, paisParameter, idConfederacionParameter, filasActualizadas);
        }
    }
}
